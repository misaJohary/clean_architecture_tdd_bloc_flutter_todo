// Mocks generated by Mockito 5.3.0 from annotations
// in my_todo_clean/test/features/create_new_task/presentation/bloc/new_task_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_todo_clean/core/error/failure.dart' as _i5;
import 'package:my_todo_clean/features/create_new_task/domain/usecases/create_task_usecase.dart'
    as _i3;
import 'package:my_todo_clean/features/create_new_task/domain/usecases/update_task.dart'
    as _i7;
import 'package:my_todo_clean/features/task/domain/entity/task_entity.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [CreateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTaskUseCase extends _i1.Mock implements _i3.CreateTaskUseCase {
  MockCreateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>> call(
          _i3.AddTaskParam? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>.value(
                      _FakeEither_0<_i5.Failure, _i6.TaskEntity>(
                          this, Invocation.method(#call, [params]))))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>);
}

/// A class which mocks [UpdateTaskUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUsecase extends _i1.Mock implements _i7.UpdateTaskUsecase {
  MockUpdateTaskUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>> call(
          _i7.UpdateTaskParam? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>.value(
                      _FakeEither_0<_i5.Failure, _i6.TaskEntity>(
                          this, Invocation.method(#call, [params]))))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>);
}
